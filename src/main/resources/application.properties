spring.application.name=demo
server.port=8080   
#db configuration

spring.datasource.url=jdbc:mysql://localhost:3306/blog_app_apis
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#create update create-drop  validate 

spring.jpa.hibernate.ddl-auto=update 
#update--update the schema without dropping the existing table
#when to used--during developement you are incrementally modifying the  your entity classes 
# i want hibernate to automatically  adjust the schema
#create-- Drops the existing schema (if any) and creates a new schema based on entity mappings.	

spring.jpa.show-sql=true

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
project.image=images/

#security
#to display all log on console 
logging.level.org.springframework.security=DEBUG
#spring.security.user.name=sanket
#spring.security.user.password=sanket
#spring.security.user.roles=ADMIN

#http://localhost:8080/swagger-ui/index.html
#springdoc-openapi java library helps to automate the generation of API documentation using spring boot projects. springdoc-openapi works by examining an application at runtime to infer API semantics based on spring configurations, class structure and various annotations.
# /api-docs endpoint custom path
springdoc.api-docs.path=/api-docs

